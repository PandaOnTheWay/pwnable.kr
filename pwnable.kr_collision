this part is more complex than the former
just ssh to it:
	ssh col@pwnable.kr -p2222
then we cat the code:
	#include <stdio.h>
	#include <string.h>
	unsigned long hashcode = 0x21DD09EC;
	unsigned long check_password(const char* p){
		int* ip = (int*)p;
		int i;
		int res=0;
		for(i=0; i<5; i++){
			res += ip[i];
		}
		return res;
	}

	int main(int argc, char* argv[]){
		if(argc<2){
			printf("usage : %s [passcode]\n", argv[0]);
			return 0;
		}
		if(strlen(argv[1]) != 20){
			printf("passcode length should be 20 bytes\n");
			return 0;
		}

		if(hashcode == check_password( argv[1] )){
			system("/bin/cat flag");
			return 0;
		}
		else
			printf("wrong passcode.\n");
		return 0;
	}
from this we know that we need to input a string whose length equals 20
then, 4 chars make up an int (8bits/char and 32bits/int), such as:
	"abcd" eqauls 0x61626364
and we transform 20 chars into 5 int, next add them up(we can just call the sum "res")
finally, we have to compare whether res==hashcode, which is defined as 0x21DD09EC

from ohters blog, i learnt that we can use \x00 to nop the position
but there's a little problem is that if we use \x00*16 then it remains \x21\xDD\x09\xEC, and \x09 is a bad word so we have to avoid it
then we use \x00*16 to nop, and it remains \x1d\xd9\x05\xe8
to check the file:
	col@ubuntu:~$ file col
	col: setuid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=05a10e253161f02d8e6553d95018bc82c7b531fe, not stripped
from the blog we know in this process, high 4 bits stored in the low address and low 4 bits stored in the high address, such as:
	if you have an int 0x1234
	in the memory it will be:
		|	\x34	|	low address
		|	\x12	|	high address
so we reverse \x1d\xd9\x05\xe8 to \xe8\x05\xd9\x1d
then i learn such a genius instruction:
	col@ubuntu:~$ ./col `python -c "print '\x01*16+'\xe8\x05\xd9\x1d'"`
WOW
for myself, i just know i can write like this

`python -c "print '\x01\x01\x01\x01'*4+'\xe8\x05\xd9\x1d'"` !!!

what a bueatiful !
then we get the flag:
	daddy! I just managed to create a hash collision :)
	
reference:
	https://blog.csdn.net/levones/article/details/81028067
	(thx for the blog)
